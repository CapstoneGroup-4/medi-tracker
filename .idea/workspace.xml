<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="5bf287b8-a01c-4a18-ac99-0af5df5a4c29" name="Changes" comment="">
      <change beforePath="$PROJECT_DIR$/.idea/dataSources.local.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/dataSources.local.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/dataSources.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/dataSources.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/Server/MediTrackerUserServer/pom.xml" beforeDir="false" afterPath="$PROJECT_DIR$/Server/MediTrackerUserServer/pom.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/Server/MediTrackerUserServer/src/main/java/edu/capstone4/userserver/controllers/MedicalRecordController.java" beforeDir="false" afterPath="$PROJECT_DIR$/Server/MediTrackerUserServer/src/main/java/edu/capstone4/userserver/controllers/MedicalRecordController.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/Server/MediTrackerUserServer/src/main/java/edu/capstone4/userserver/controllers/UserController.java" beforeDir="false" afterPath="$PROJECT_DIR$/Server/MediTrackerUserServer/src/main/java/edu/capstone4/userserver/controllers/UserController.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/Server/MediTrackerUserServer/src/main/java/edu/capstone4/userserver/jwt/AuthTokenFilter.java" beforeDir="false" afterPath="$PROJECT_DIR$/Server/MediTrackerUserServer/src/main/java/edu/capstone4/userserver/jwt/AuthTokenFilter.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/Server/MediTrackerUserServer/src/main/java/edu/capstone4/userserver/models/Doctor.java" beforeDir="false" afterPath="$PROJECT_DIR$/Server/MediTrackerUserServer/src/main/java/edu/capstone4/userserver/models/Doctor.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/Server/MediTrackerUserServer/src/main/java/edu/capstone4/userserver/models/MedicalRecord.java" beforeDir="false" afterPath="$PROJECT_DIR$/Server/MediTrackerUserServer/src/main/java/edu/capstone4/userserver/models/MedicalRecord.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/Server/MediTrackerUserServer/src/main/java/edu/capstone4/userserver/models/User.java" beforeDir="false" afterPath="$PROJECT_DIR$/Server/MediTrackerUserServer/src/main/java/edu/capstone4/userserver/models/User.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/Server/MediTrackerUserServer/src/main/java/edu/capstone4/userserver/repository/MedicalRecordRepository.java" beforeDir="false" afterPath="$PROJECT_DIR$/Server/MediTrackerUserServer/src/main/java/edu/capstone4/userserver/repository/MedicalRecordRepository.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/Server/MediTrackerUserServer/src/main/java/edu/capstone4/userserver/repository/RoleRepository.java" beforeDir="false" afterPath="$PROJECT_DIR$/Server/MediTrackerUserServer/src/main/java/edu/capstone4/userserver/repository/RoleRepository.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/Server/MediTrackerUserServer/src/main/java/edu/capstone4/userserver/services/MedicalRecordService.java" beforeDir="false" afterPath="$PROJECT_DIR$/Server/MediTrackerUserServer/src/main/java/edu/capstone4/userserver/services/MedicalRecordService.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/Server/MediTrackerUserServer/src/main/java/edu/capstone4/userserver/services/RoleService.java" beforeDir="false" afterPath="$PROJECT_DIR$/Server/MediTrackerUserServer/src/main/java/edu/capstone4/userserver/services/RoleService.java" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Class" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="HighlightingSettingsPerFile">
    <setting file="file://$PROJECT_DIR$/Server/MediTrackerUserServer/target/classes/application.properties" root0="FORCE_HIGHLIGHTING" />
  </component>
  <component name="ProblemsViewState">
    <option name="selectedTabId" value="CurrentFile" />
  </component>
  <component name="ProjectColorInfo">{
  &quot;customColor&quot;: &quot;&quot;,
  &quot;associatedIndex&quot;: 1
}</component>
  <component name="ProjectId" id="2oJjcfruOvTMncAAnwxcasoPZg4" />
  <component name="ProjectLevelVcsManager">
    <ConfirmationsSetting value="2" id="Add" />
  </component>
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">{
  &quot;keyToString&quot;: {
    &quot;RequestMappingsPanelOrder0&quot;: &quot;0&quot;,
    &quot;RequestMappingsPanelOrder1&quot;: &quot;1&quot;,
    &quot;RequestMappingsPanelWidth0&quot;: &quot;75&quot;,
    &quot;RequestMappingsPanelWidth1&quot;: &quot;75&quot;,
    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,
    &quot;Spring Boot.MediTrackerUserServerApplication.executor&quot;: &quot;Run&quot;,
    &quot;git-widget-placeholder&quot;: &quot;dev&quot;,
    &quot;ignore.virus.scanning.warn.message&quot;: &quot;true&quot;,
    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,
    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
    &quot;settings.editor.selected.configurable&quot;: &quot;reference.settings.project.maven.importing&quot;,
    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
  },
  &quot;keyToStringList&quot;: {
    &quot;DatabaseDriversLRU&quot;: [
      &quot;mysql&quot;
    ]
  }
}</component>
  <component name="RunManager">
    <configuration name="MediTrackerUserServerApplication" type="SpringBootApplicationConfigurationType" factoryName="Spring Boot" nameIsGenerated="true">
      <module name="MediTrackerUserServer" />
      <option name="SPRING_BOOT_MAIN_CLASS" value="edu.capstone4.userserver.MediTrackerUserServerApplication" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
  </component>
  <component name="SharedIndexes">
    <attachedChunks>
      <set>
        <option value="bundled-jdk-9823dce3aa75-28b599e66164-intellij.indexing.shared.core-IU-242.23726.103" />
        <option value="bundled-js-predefined-d6986cc7102b-5c90d61e3bab-JavaScript-IU-242.23726.103" />
      </set>
    </attachedChunks>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="5bf287b8-a01c-4a18-ac99-0af5df5a4c29" name="Changes" comment="" />
      <created>1730594654038</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1730594654038</updated>
      <workItem from="1730594655852" duration="4345000" />
      <workItem from="1730599013900" duration="63000" />
      <workItem from="1730599085066" duration="4632000" />
      <workItem from="1730706889917" duration="153000" />
      <workItem from="1730707052805" duration="1052000" />
      <workItem from="1730708132412" duration="5438000" />
    </task>
    <task id="LOCAL-00001" summary="feat: Update MedicalRecord Model&#10;    Added a List&lt;Attachment&gt; field to store file attachments, establishing a one-to-many relationship with the Attachment model.&#10;&#10;feat: Create Attachment Model&#10;    Created the Attachment model with fields:&#10;        fileName: String&#10;        fileType: String&#10;        fileData: byte[] (using @Lob for binary data)&#10;        uploadDate: Date&#10;        medicalRecord: Many-to-one relationship with MedicalRecord.&#10;&#10;feat: Implement MedicalRecordController&#10;    Created RESTful API endpoints for CRUD operations:&#10;        POST /api/medical-records/create: Create a new medical record.&#10;        GET /api/medical-records/{id}: Retrieve a medical record by ID.&#10;        GET /api/medical-records/all: Retrieve all non-deleted medical records with pagination and sorting.&#10;        PUT /api/medical-records/update/{id}: Update a medical record by ID.&#10;        DELETE /api/medical-records/delete/{id}: Logically delete a medical record.&#10;        POST /api/medical-records/{recordId}/upload: Upload a file attachment and associate it with a medical record.&#10;        GET /api/medical-records/{recordId}/download/{fileId}: Download a file attachment.&#10;&#10;feat: Implement MedicalRecordService Logic&#10;    Added core CRUD logic for creating, updating, and deleting medical records.&#10;    Implemented file upload and download functionality, linking attachments to respective medical records.&#10;    Set isDeleted to true for logical deletion of records.&#10;&#10;feat: Add Input Validation and Error Handling&#10;    Utilized @Valid annotation for input validation in create and update endpoints, providing detailed error feedback.&#10;&#10;feat: Integrate Logging Functionality&#10;    Added SLF4J logging for critical operations (e.g., creation and deletion of medical records) to assist with debugging.&#10;&#10;feat: Implement Pagination and Sorting&#10;    Enhanced getAllRecords() to support pagination and sorting using Pageable and PageRequest.&#10;&#10;feat: Establish Role-Based Access Control (RBAC)&#10;    Utilized @PreAuthorize to enforce role-based access control in the controller, allowing only authorized users to perform specific actions.">
      <option name="closed" value="true" />
      <created>1730601280393</created>
      <option name="number" value="00001" />
      <option name="presentableId" value="LOCAL-00001" />
      <option name="project" value="LOCAL" />
      <updated>1730601280393</updated>
    </task>
    <task id="LOCAL-00002" summary="Add User entity with fields: username, email, password, roles, and enabled status">
      <option name="closed" value="true" />
      <created>1730602716774</created>
      <option name="number" value="00002" />
      <option name="presentableId" value="LOCAL-00002" />
      <option name="project" value="LOCAL" />
      <updated>1730602716774</updated>
    </task>
    <task id="LOCAL-00003" summary="Implement UserController with RESTful endpoints for user operations">
      <option name="closed" value="true" />
      <created>1730602733366</created>
      <option name="number" value="00003" />
      <option name="presentableId" value="LOCAL-00003" />
      <option name="project" value="LOCAL" />
      <updated>1730602733366</updated>
    </task>
    <task id="LOCAL-00004" summary="Implement UserService to handle business logic for user management">
      <option name="closed" value="true" />
      <created>1730602742502</created>
      <option name="number" value="00004" />
      <option name="presentableId" value="LOCAL-00004" />
      <option name="project" value="LOCAL" />
      <updated>1730602742502</updated>
    </task>
    <task id="LOCAL-00005" summary="Add ResourceNotFoundException for handling user not found scenarios">
      <option name="closed" value="true" />
      <created>1730602753027</created>
      <option name="number" value="00005" />
      <option name="presentableId" value="LOCAL-00005" />
      <option name="project" value="LOCAL" />
      <updated>1730602753027</updated>
    </task>
    <task id="LOCAL-00006" summary="Implement RoleService to handle business logic for role management">
      <option name="closed" value="true" />
      <created>1730603038253</created>
      <option name="number" value="00006" />
      <option name="presentableId" value="LOCAL-00006" />
      <option name="project" value="LOCAL" />
      <updated>1730603038253</updated>
    </task>
    <task id="LOCAL-00007" summary="Implement RoleController with RESTful endpoints for role operations">
      <option name="closed" value="true" />
      <created>1730603046447</created>
      <option name="number" value="00007" />
      <option name="presentableId" value="LOCAL-00007" />
      <option name="project" value="LOCAL" />
      <updated>1730603046447</updated>
    </task>
    <option name="localTasksCounter" value="8" />
    <servers />
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="3" />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State />
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="feat: Update MedicalRecord Model&#10;    Added a List&lt;Attachment&gt; field to store file attachments, establishing a one-to-many relationship with the Attachment model.&#10;&#10;feat: Create Attachment Model&#10;    Created the Attachment model with fields:&#10;        fileName: String&#10;        fileType: String&#10;        fileData: byte[] (using @Lob for binary data)&#10;        uploadDate: Date&#10;        medicalRecord: Many-to-one relationship with MedicalRecord.&#10;&#10;feat: Implement MedicalRecordController&#10;    Created RESTful API endpoints for CRUD operations:&#10;        POST /api/medical-records/create: Create a new medical record.&#10;        GET /api/medical-records/{id}: Retrieve a medical record by ID.&#10;        GET /api/medical-records/all: Retrieve all non-deleted medical records with pagination and sorting.&#10;        PUT /api/medical-records/update/{id}: Update a medical record by ID.&#10;        DELETE /api/medical-records/delete/{id}: Logically delete a medical record.&#10;        POST /api/medical-records/{recordId}/upload: Upload a file attachment and associate it with a medical record.&#10;        GET /api/medical-records/{recordId}/download/{fileId}: Download a file attachment.&#10;&#10;feat: Implement MedicalRecordService Logic&#10;    Added core CRUD logic for creating, updating, and deleting medical records.&#10;    Implemented file upload and download functionality, linking attachments to respective medical records.&#10;    Set isDeleted to true for logical deletion of records.&#10;&#10;feat: Add Input Validation and Error Handling&#10;    Utilized @Valid annotation for input validation in create and update endpoints, providing detailed error feedback.&#10;&#10;feat: Integrate Logging Functionality&#10;    Added SLF4J logging for critical operations (e.g., creation and deletion of medical records) to assist with debugging.&#10;&#10;feat: Implement Pagination and Sorting&#10;    Enhanced getAllRecords() to support pagination and sorting using Pageable and PageRequest.&#10;&#10;feat: Establish Role-Based Access Control (RBAC)&#10;    Utilized @PreAuthorize to enforce role-based access control in the controller, allowing only authorized users to perform specific actions." />
    <MESSAGE value="Add User entity with fields: username, email, password, roles, and enabled status" />
    <MESSAGE value="Implement UserController with RESTful endpoints for user operations" />
    <MESSAGE value="Implement UserService to handle business logic for user management" />
    <MESSAGE value="Add ResourceNotFoundException for handling user not found scenarios" />
    <MESSAGE value="Implement RoleService to handle business logic for role management" />
    <MESSAGE value="Implement RoleController with RESTful endpoints for role operations" />
    <option name="LAST_COMMIT_MESSAGE" value="Implement RoleController with RESTful endpoints for role operations" />
  </component>
  <component name="XDebuggerManager">
    <breakpoint-manager>
      <breakpoints>
        <line-breakpoint enabled="true" type="java-line">
          <url>file://$PROJECT_DIR$/Server/MediTrackerUserServer/src/main/java/edu/capstone4/userserver/config/WebSecurityConfig.java</url>
          <line>72</line>
          <option name="timeStamp" value="1" />
        </line-breakpoint>
      </breakpoints>
    </breakpoint-manager>
  </component>
</project>